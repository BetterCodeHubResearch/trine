{"name":"trine","version":"0.0.0","categories":[{"name":"boolean","modules":[{"libraryName":"trine","filename":"src/boolean/and.js","version":"0.0.0","category":"boolean","module":"and","importTarget":"trine/boolean/and","source":"\"use strict\";\n\n/**\n * Returns true if both operands are true.\n *\n * @this {boolean} Left boolean operand.\n * @param right Right boolean operand.\n * @example Basic Usage\n *\n * ```javascript\n * true::and(true) // true\n * true::and(false) // false\n * false::and(true) // false\n * false::and(false) // false\n * ```\n*/\nexport function and (\n    right : boolean,\n) : boolean {\n    return this && right;\n};\n","exports":[{"type":"Function","name":"and","description":"<p>Returns true if both operands are true.</p>","thisParameter":{"type":"boolean","description":"Left boolean operand."},"parameters":[{"name":"right","type":"boolean","description":"Right boolean operand.","rest":false}],"typeParameters":[],"returns":{"type":"boolean"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":178,"end":188,"name":"javascript"},"content":"true::and(true) // true\ntrue::and(false) // false\nfalse::and(true) // false\nfalse::and(false) // false"}]}]}]},{"libraryName":"trine","filename":"src/boolean/equals.js","version":"0.0.0","category":"boolean","module":"equals","importTarget":"trine/boolean/equals","source":"\"use strict\";\n\n/**\n * Returns the strict equality of the two operands.\n *\n * @this {any} The left operand to compare.\n * @param right The right operand to compare to.\n * @example Basic Usage\n *\n * ```javascript\n * \"foo\"::equals(\"bar\") // false\n * \"bar\"::equals(\"bar\") // true\n * ```\n*/\nexport function equals (\n    right : any,\n) : boolean {\n    return this === right;\n};\n","exports":[{"type":"Function","name":"equals","description":"<p>Returns the strict equality of the two operands.</p>","thisParameter":{"type":"any","description":"The left operand to compare."},"parameters":[{"name":"right","type":"any","description":"The right operand to compare to.","rest":false}],"typeParameters":[],"returns":{"type":"boolean"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":200,"end":210,"name":"javascript"},"content":"\"foo\"::equals(\"bar\") // false\n\"bar\"::equals(\"bar\") // true"}]}]}]},{"libraryName":"trine","filename":"src/boolean/not.js","version":"0.0.0","category":"boolean","module":"not","importTarget":"trine/boolean/not","source":"\"use strict\";\n\n/**\n * Returns the negation of the boolean.\n *\n * @this {boolean} The boolean to negate.\n * @example Basic Usage\n *\n * ```javascript\n * true::not() // false\n * false::not() // true\n * ```\n*/\nexport function not (\n\n) : boolean {\n    return !this;\n};\n","exports":[{"type":"Function","name":"not","description":"<p>Returns the negation of the boolean.</p>","thisParameter":{"type":"boolean","description":"The boolean to negate."},"parameters":[],"typeParameters":[],"returns":{"type":"boolean"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":137,"end":147,"name":"javascript"},"content":"true::not() // false\nfalse::not() // true"}]}]}]},{"libraryName":"trine","filename":"src/boolean/or.js","version":"0.0.0","category":"boolean","module":"or","importTarget":"trine/boolean/or","source":"\"use strict\";\n\n/**\n * Returns true if either of the operands is true.\n *\n * @this {boolean} Left boolean operand.\n * @param right Right boolean operand.\n * @example Basic Usage\n *\n * ```javascript\n * true::or(true) // true\n * true::or(false) // true\n * false::or(true) // true\n * false::or(false) // false\n * ```\n*/\nexport function or (\n    right : boolean,\n) : boolean {\n    return this || right;\n};\n","exports":[{"type":"Function","name":"or","description":"<p>Returns true if either of the operands is true.</p>","thisParameter":{"type":"boolean","description":"Left boolean operand."},"parameters":[{"name":"right","type":"boolean","description":"Right boolean operand.","rest":false}],"typeParameters":[],"returns":{"type":"boolean"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":186,"end":196,"name":"javascript"},"content":"true::or(true) // true\ntrue::or(false) // true\nfalse::or(true) // true\nfalse::or(false) // false"}]}]}]},{"libraryName":"trine","filename":"src/boolean/xor.js","version":"0.0.0","category":"boolean","module":"xor","importTarget":"trine/boolean/xor","source":"\"use strict\";\n\n/**\n * Returns true if one and only one of the conditions is true.\n *\n * @this {boolean} Left boolean operand.\n * @param right Right boolean operand.\n * @example Basic Usage\n *\n * ```javascript\n * true::and(true) // false\n * true::and(false) // true\n * false::and(true) // true\n * false::and(false) // false\n * ```\n*/\nexport function xor (\n    right : boolean,\n) : boolean {\n    return Boolean(Number(this) ^ Number(right));\n};\n","exports":[{"type":"Function","name":"xor","description":"<p>Returns true if one and only one of the conditions is true.</p>","thisParameter":{"type":"boolean","description":"Left boolean operand."},"parameters":[{"name":"right","type":"boolean","description":"Right boolean operand.","rest":false}],"typeParameters":[],"returns":{"type":"boolean"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":198,"end":208,"name":"javascript"},"content":"true::and(true) // false\ntrue::and(false) // true\nfalse::and(true) // true\nfalse::and(false) // false"}]}]}]}]},{"name":"function","modules":[{"libraryName":"trine","filename":"src/function/partial.js","version":"0.0.0","category":"function","module":"partial","importTarget":"trine/function/partial","source":"\"use strict\";\n\n/**\n * Used for partial application to denote that this slot expects an\n * argument from the resulting function's calls.\n*/\nexport const _ = Symbol(\"placeholder\");\n\n/**\n * Used for partial application to denote that this slot expects zero or\n * more arguments from the resulting function's calls.\n*/\nexport const ___ = Symbol(\"rest placeholder\");\n\nfunction countPlaceholders () {\n    return this.filter((param) => param === _).length;\n}\n\nfunction flatMap (transformer) {\n    return [].concat.apply([], this.map(transformer));\n}\n\n/**\n * Returns a version of the function that has given parameters prefilled and passes given parameters through to the original, denoted by placeholders.\n *\n * @this {T}\n * @param ...staticParams The prefilled parameters.\n * @example Unary `parseInt`\n *\n * ```javascript\n * parseInt\n * ```\n *\n * @example Hexadecimal `parseInt`\n *\n * ```javascript\n * parseInt\n * ```\n *\n * @example Fill Only the Second Argument\n *\n * ```javascript\n * function foo (a, b, c, d) {\n *   console.log(a, b, c, d);\n * }\n *\n * foo::partial(_, 2, ___)(1, 3, 4) // logs \"1 2 3 4\"\n * ```\n *\n * @example Fill Only the Second Last Argument\n *\n * ```javascript\n * function foo (a, b, c, d) {\n *   console.log(a, b, c, d);\n * }\n *\n * foo::partial(___, 3, _)(1, 2, 4) // logs \"1 2 3 4\"\n * ```\n *\n * @example Compose a Prototype Method\n *\n * ```javascript\n * const slice1 = Array.prototype.slice::partial(1, ___);\n * [1, 2, 3, 4]::slice1() // [2, 3, 4]\n * ```\n*/\nexport function partial <T> (...staticParams : any) : T {\n    const delegate = this;\n    const restIndex = staticParams.indexOf(___);\n    const placeholdersAfterRest = staticParams\n        .slice(restIndex === -1 ? staticParams.length : restIndex + 1)\n        ::countPlaceholders();\n\n    if ( staticParams.indexOf(___, restIndex + 1) !== -1 ) {\n        throw new TypeError(\"You can only pass one rest placeholder to partial.\");\n    }\n\n    return function (...params) {\n        const passedParams = staticParams::flatMap((param, index) => {\n            if ( param === _ ) {\n                if ( params.length > 0 ) {\n                    return [params.shift()];\n                }\n            } else if ( param === ___ ) {\n                if ( params.length > placeholdersAfterRest ) {\n                    return params.splice(0, params.length - placeholdersAfterRest);\n                }\n            } else {\n                return [param];\n            }\n\n            return [];\n        });\n\n        return delegate.apply(this, passedParams);\n    };\n};\n","exports":[{"type":"Function","name":"partial","description":"<p>Returns a version of the function that has given parameters prefilled and passes given parameters through to the original, denoted by placeholders.</p>","thisParameter":{"type":"T","description":""},"parameters":[{"name":"staticParams","type":"any","description":"","rest":true}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"T"},"examples":[{"title":"Unary <code>parseInt</code>","content":[{"type":"code","language":{"type":"Identifier","start":805,"end":815,"name":"javascript"},"content":"parseInt"}]},{"title":"Hexadecimal <code>parseInt</code>","content":[{"type":"code","language":{"type":"Identifier","start":882,"end":892,"name":"javascript"},"content":"parseInt"}]},{"title":"Fill Only the Second Argument","content":[{"type":"code","language":{"type":"Identifier","start":966,"end":976,"name":"javascript"},"content":"function foo (a, b, c, d) {\n  console.log(a, b, c, d);\n}\n\nfoo::partial(_, 2, ___)(1, 3, 4) // logs \"1 2 3 4\""}]},{"title":"Fill Only the Second Last Argument","content":[{"type":"code","language":{"type":"Identifier","start":1166,"end":1176,"name":"javascript"},"content":"function foo (a, b, c, d) {\n  console.log(a, b, c, d);\n}\n\nfoo::partial(___, 3, _)(1, 2, 4) // logs \"1 2 3 4\""}]},{"title":"Compose a Prototype Method","content":[{"type":"code","language":{"type":"Identifier","start":1358,"end":1368,"name":"javascript"},"content":"const slice1 = Array.prototype.slice::partial(1, ___);\n[1, 2, 3, 4]::slice1() // [2, 3, 4]"}]}]}]}]},{"name":"iterable","modules":[{"libraryName":"trine","filename":"src/iterable/aggregate.js","version":"0.0.0","category":"iterable","module":"aggregate","importTarget":"trine/iterable/aggregate","source":"\"use strict\";\n\n/**\n * Yields all the accumulations of the iterator with a given accumulator method.\n *\n * @type rT The item type of the returned iterator.\n * @type iT The item type of the input iterator.\n * @this {Iterable<iT>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::aggregate(function (b) {\n *   return this + b;\n * }, 0) // yields 0, 1, 3, 6\n * ```\n*/\nexport function * aggregate <rT, iT> (\n    accumulator : (_this : rT, item : iT) => rT,\n    accumulation : rT,\n) : Iterable<rT> {\n    for ( const item of this ) {\n        yield accumulation;\n        accumulation = accumulation::accumulator(item);\n    }\n\n    yield accumulation;\n};\n","exports":[{"type":"Function","name":"aggregate","description":"<p>Yields all the accumulations of the iterator with a given accumulator method.</p>","thisParameter":{"type":"Iterable<iT>","description":""},"parameters":[{"name":"accumulator","type":"(_this : rT, item : iT) => rT","description":"","rest":false},{"name":"accumulation","type":"rT","description":"","rest":false}],"typeParameters":[{"name":"rT","description":"The item type of the returned iterator."},{"name":"iT","description":"The item type of the input iterator."}],"returns":{"type":"Iterable<rT>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":292,"end":302,"name":"javascript"},"content":"[1,2,3]::aggregate(function (b) {\n  return this + b;\n}, 0) // yields 0, 1, 3, 6"}]}]}]},{"libraryName":"trine","filename":"src/iterable/convolve.js","version":"0.0.0","category":"iterable","module":"convolve","importTarget":"trine/iterable/convolve","source":"\"use strict\";\n\n/**\n * Maps the iterator with the additional tail of `k` previous items.\n * `k` is determined by the number of items in the accumulation iterator.\n *\n * @type rT The item type of the returned iterator.\n * @type iT The item type of the input iterator.\n * @this {Iterable<iT>}\n * @ntime O(n)\n * @dspace O(k)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3].convolve(function (tail) {\n *   return [...tail, this].reduce(add);\n * }, [0, -1]) // yields 0, 3, 6\n * ```\n*/\nexport function * convolve <rT, iT> (\n    accumulator : (_this : iT, tail : iT) => rT,\n    tail : Iterable<iT>,\n) : Iterable<rT> {\n    let currentTail = [...tail];\n\n    for ( const item of this ) {\n        const result = item::accumulator(currentTail);\n        currentTail = [item].concat(currentTail.slice(0, tail.length - 1));\n        yield result;\n    }\n};\n","exports":[{"type":"Function","name":"convolve","description":"<p>Maps the iterator with the additional tail of <code>k</code> previous items. <code>k</code> is determined by the number of items in the accumulation iterator.</p>","thisParameter":{"type":"Iterable<iT>","description":""},"parameters":[{"name":"accumulator","type":"(_this : iT, tail : iT) => rT","description":"","rest":false},{"name":"tail","type":"Iterable<iT>","description":"","rest":false}],"typeParameters":[{"name":"rT","description":"The item type of the returned iterator."},{"name":"iT","description":"The item type of the input iterator."}],"returns":{"type":"Iterable<rT>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":354,"end":364,"name":"javascript"},"content":"[1,2,3].convolve(function (tail) {\n  return [...tail, this].reduce(add);\n}, [0, -1]) // yields 0, 3, 6"}]}]}]},{"libraryName":"trine","filename":"src/iterable/count.js","version":"0.0.0","category":"iterable","module":"count","importTarget":"trine/iterable/count","source":"\"use strict\";\n\n/**\n * Yields the number of items in the iterator.\n *\n * @this {Iterable<any>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::count() // yields 3\n * ```\n*/\nexport function * count (\n) : Iterable<T> {\n    let count = 0;\n\n    for ( const item of this ) {\n        count++;\n    }\n\n    yield count;\n};\n","exports":[{"type":"Function","name":"count","description":"<p>Yields the number of items in the iterator.</p>","thisParameter":{"type":"Iterable<any>","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":158,"end":168,"name":"javascript"},"content":"[1,2,3]::count() // yields 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/difference.js","version":"0.0.0","category":"iterable","module":"difference","importTarget":"trine/iterable/difference","source":"\"use strict\";\n\n/**\n * Yields the sorted difference iterator of two sorted iterators.\n *\n * @this {Iterable<T>}\n * @param comparator The sorting value function.\n * Should return `0` when items are equal, a positive number when the item\n * on the left is greater and a negative number when the item on the right is greater.\n * @ntime O(n+m)\n * @dspace O(2)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,4]::difference([2,3,4,5], function (b) {\n *   return this - b;\n * }); // yields 1,3,5\n * ```\n*/\nexport function * difference <T> (\n    b : Iterable<T>,\n    comparator : (_this: T, item: T) => number,\n) : Iterable<T> {\n    const iteratorA = this[Symbol.iterator]();\n    const iteratorB = b[Symbol.iterator]();\n    let stepA = iteratorA.next();\n    let stepB = iteratorB.next();\n\n    while ( !stepA.done && !stepB.done ) {\n        const comparison = stepA.value::comparator(stepB.value);\n\n        if ( comparison < 0 ) {\n            yield stepA.value;\n            stepA = iteratorA.next();\n        } else if ( comparison > 0 ) {\n            yield stepB.value;\n            stepB = iteratorB.next();\n        } else {\n            stepA = iteratorA.next();\n            stepB = iteratorB.next();\n        }\n    }\n\n    if ( !stepA.done ) {\n        yield stepA.value;\n        yield * iteratorA;\n    } else if ( !stepB.done ) {\n        yield stepB.value;\n        yield * iteratorB;\n    }\n};\n","exports":[{"type":"Function","name":"difference","description":"<p>Yields the sorted difference iterator of two sorted iterators.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"b","type":"Iterable<T>","description":"","rest":false},{"name":"comparator","type":"(_this: T, item: T) => number","description":"The sorting value function. Should return <code>0</code> when items are equal, a positive number when the item on the left is greater and a negative number when the item on the right is greater.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":388,"end":398,"name":"javascript"},"content":"[1,2,4]::difference([2,3,4,5], function (b) {\n  return this - b;\n}); // yields 1,3,5"}]}]}]},{"libraryName":"trine","filename":"src/iterable/drop.js","version":"0.0.0","category":"iterable","module":"drop","importTarget":"trine/iterable/drop","source":"\"use strict\";\n\n/**\n * Yields the items that don't qualify the condition.\n *\n * @this {Iterable<T>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3,4]::drop(function () {\n *   return this % 2 === 0;\n * }) // yields 1, 3\n * ```\n*/\nexport function * drop <T> (\n    condition : (_this : T) => boolean,\n) : Iterator<T> {\n    for ( const item of this ) {\n        if ( !item::condition() ) { yield item; }\n    }\n};\n","exports":[{"type":"Function","name":"drop","description":"<p>Yields the items that don&#39;t qualify the condition.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"condition","type":"(_this : T) => boolean","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterator<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":163,"end":173,"name":"javascript"},"content":"[1,2,3,4]::drop(function () {\n  return this % 2 === 0;\n}) // yields 1, 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/dropWhile.js","version":"0.0.0","category":"iterable","module":"dropWhile","importTarget":"trine/iterable/dropWhile","source":"\"use strict\";\n\n/**\n * Yields the first item that matches condition, and all the items after that.\n *\n * @this {Iterable<T>}\n * @param condition A condition called on every item to see if it should be dropped.\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3,4,1,2,3,4]::dropWhile(function () {\n *   return this &lt; 4;\n * }) // yields 4, 1, 2, 3, 4\n * ```\n*/\nexport function * dropWhile <T> (\n    condition : (_this : T) => boolean,\n) : Iterable<T> {\n    const iterator = this[Symbol.iterator]();\n\n    for ( const item of iterator ) {\n        if ( item::condition() ) { continue; }\n        yield item;\n    }\n\n    yield * iterator;\n};\n","exports":[{"type":"Function","name":"dropWhile","description":"<p>Yields the first item that matches condition, and all the items after that.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"condition","type":"(_this : T) => boolean","description":"A condition called on every item to see if it should be dropped.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":273,"end":283,"name":"javascript"},"content":"[1,2,3,4,1,2,3,4]::dropWhile(function () {\n  return this &lt; 4;\n}) // yields 4, 1, 2, 3, 4"}]}]}]},{"libraryName":"trine","filename":"src/iterable/find.js","version":"0.0.0","category":"iterable","module":"find","importTarget":"trine/iterable/find","source":"\"use strict\";\n\n/**\n * Yields the first item that qualifies the condition.\n *\n * @this {Iterable<T>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [{id:2,x:1}, {id:3,x:2}, {id:4,x:4}, {id:3,x:5}]::find(function () {\n *   return this.id === 3;\n * }) // yields { id: 3, x: 2 }\n * ```\n*/\nexport function * find <T> (\n    condition : (_this : T) => boolean,\n) : Iterable<T> {\n    for ( const item of this ) {\n        if ( item::condition() ) {\n            yield item;\n            return;\n        }\n    }\n};\n","exports":[{"type":"Function","name":"find","description":"<p>Yields the first item that qualifies the condition.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"condition","type":"(_this : T) => boolean","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":164,"end":174,"name":"javascript"},"content":"[{id:2,x:1}, {id:3,x:2}, {id:4,x:4}, {id:3,x:5}]::find(function () {\n  return this.id === 3;\n}) // yields { id: 3, x: 2 }"}]}]}]},{"libraryName":"trine","filename":"src/iterable/first.js","version":"0.0.0","category":"iterable","module":"first","importTarget":"trine/iterable/first","source":"\"use strict\";\n\n/**\n * Yields the k-th item of the iterator.\n *\n * @this {Iterable<T>}\n * @ntime O(k)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::first(0) // yields 1\n * [1,2,3]::first(1) // yields 2\n * [1,2,3]::first(2) // yields 3\n * [1,2,3]::first(3) // yields nothing\n * ```\n*/\nexport function * first <T> (\n    k : number,\n) : Iterable<T> {\n    let index = 0;\n\n    for ( const item of this ) {\n        if ( index++ === k ) {\n            yield item;\n            return;\n        }\n    }\n};\n","exports":[{"type":"Function","name":"first","description":"<p>Yields the k-th item of the iterator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"k","type":"number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":150,"end":160,"name":"javascript"},"content":"[1,2,3]::first(0) // yields 1\n[1,2,3]::first(1) // yields 2\n[1,2,3]::first(2) // yields 3\n[1,2,3]::first(3) // yields nothing"}]}]}]},{"libraryName":"trine","filename":"src/iterable/fork.js","version":"0.0.0","category":"iterable","module":"fork","importTarget":"trine/iterable/fork","source":"\"use strict\";\n\n/**\n * Forks the iterator and yields the forks.\n *\n * @this {Iterable<T>}\n * @example Basic Usage\n *\n * ```javascript\n * const source = [1,2,3]::map(function () { return this * 2});\n * const forks = source::fork();\n * const a = forks.next().value;\n * const b = forks.next().value;\n * [...a] // [1,2,3]\n * [...b] // [1,2,3]\n * ```\n*/\nexport function * fork <T> (\n\n) : Iterable<Iterable<T>> {\n    const source = this[Symbol.iterator]();\n    const indices = [];\n    let buffer = [];\n    let readIndex = 0;\n    let done = false;\n\n    while ( true ) {\n        if ( readIndex > 0 ) {\n            throw new TypeError(\"Can't fork the iterator after the iteration has started\");\n        }\n\n        const iteratorIndex = indices.length;\n        indices.push(0);\n\n        yield function * () {\n            while ( true ) {\n                const offset = indices[iteratorIndex] - readIndex;\n\n                if ( offset < 0 ) {\n                    indices[iteratorIndex] = readIndex;\n                    const chunk = buffer.slice(offset);\n                    const lowestOffset = Math.min(...indices) - readIndex;\n\n                    if ( lowestOffset < 0 ) {\n                        buffer = buffer.slice(lowestOffset);\n                    } else {\n                        buffer = [];\n                    }\n\n                    yield * chunk;\n                    continue;\n                }\n\n                if ( done ) { return; }\n\n                const step = source.next();\n                done = step.done;\n\n                if ( done ) { return; }\n\n                buffer.push(step.value);\n                readIndex += 1;\n            }\n        }();\n    }\n};\n","exports":[{"type":"Function","name":"fork","description":"<p>Forks the iterator and yields the forks.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<Iterable<T>>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":122,"end":132,"name":"javascript"},"content":"const source = [1,2,3]::map(function () { return this * 2});\nconst forks = source::fork();\nconst a = forks.next().value;\nconst b = forks.next().value;\n[...a] // [1,2,3]\n[...b] // [1,2,3]"}]}]}]},{"libraryName":"trine","filename":"src/iterable/head.js","version":"0.0.0","category":"iterable","module":"head","importTarget":"trine/iterable/head","source":"\"use strict\";\n\n/**\n * Yields the k first items of the iterator.\n *\n * @this {Iterable<T>}\n * @ntime O(k)\n * @dspace O(k)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::head(1) // yields 1\n * [1,2,3]::head(2) // yields 1, 2\n * [1,2,3]::head(3) // yields 1, 2, 3\n * [1,2,3]::head(4) // yields 1, 2, 3\n * ```\n*/\nexport function * head <T> (\n    k : number,\n) : Iterable<T> {\n    let index = 0;\n\n    for ( const item of this ) {\n        if ( index++ >= k ) { return; }\n        yield item;\n    }\n};\n","exports":[{"type":"Function","name":"head","description":"<p>Yields the k first items of the iterator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"k","type":"number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":154,"end":164,"name":"javascript"},"content":"[1,2,3]::head(1) // yields 1\n[1,2,3]::head(2) // yields 1, 2\n[1,2,3]::head(3) // yields 1, 2, 3\n[1,2,3]::head(4) // yields 1, 2, 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/intersection.js","version":"0.0.0","category":"iterable","module":"intersection","importTarget":"trine/iterable/intersection","source":"\"use strict\";\n\n/**\n * Yields the sorted intersection iterator of two sorted iterators.\n *\n * @this {Iterable<T>}\n * @param comparator The sorting value function. Should return `0` when items are equal, a positive number when the item on the left is greater and a negative number when the item on the right is greater.\n * @ntime O(n+m)\n * @dspace O(2)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3,4,5]::intersection([2,3,4,6], function (b) {\n *   return this - b;\n * }); // yields 2,3,4\n * ```\n*/\nexport function * intersection <T> (\n    b : Iterable<T>,\n    comparator : (_this: T, item: T) => number,\n) : Iterable<T> {\n    const iteratorA = this[Symbol.iterator]();\n    const iteratorB = b[Symbol.iterator]();\n    let stepA = iteratorA.next();\n    let stepB = iteratorB.next();\n\n    while ( !stepA.done && !stepB.done ) {\n        const comparison = stepA.value::comparator(stepB.value);\n\n        if ( comparison < 0 ) {\n            stepA = iteratorA.next();\n        } else if ( comparison > 0 ) {\n            stepB = iteratorB.next();\n        } else {\n            yield stepA.value;\n            stepA = iteratorA.next();\n            stepB = iteratorB.next();\n        }\n    }\n};\n","exports":[{"type":"Function","name":"intersection","description":"<p>Yields the sorted intersection iterator of two sorted iterators.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"b","type":"Iterable<T>","description":"","rest":false},{"name":"comparator","type":"(_this: T, item: T) => number","description":"The sorting value function. Should return <code>0</code> when items are equal, a positive number when the item on the left is greater and a negative number when the item on the right is greater.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":384,"end":394,"name":"javascript"},"content":"[1,2,3,4,5]::intersection([2,3,4,6], function (b) {\n  return this - b;\n}); // yields 2,3,4"}]}]}]},{"libraryName":"trine","filename":"src/iterable/last.js","version":"0.0.0","category":"iterable","module":"last","importTarget":"trine/iterable/last","source":"\"use strict\";\n\n/**\n * Yields the k-th item from the end of the iterator.\n *\n * @this {Iterable<T>}\n * @ntime O(n)\n * @dspace O(k)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::last(0) // yields 3\n * [1,2,3]::last(1) // yields 2\n * [1,2,3]::last(2) // yields 1\n * [1,2,3]::last(3) // yields nothing\n * ```\n*/\nexport function * last <T> (\n    k : number,\n) : Iterable<T> {\n    let buffer = [];\n\n    for ( const item of this ) {\n        buffer = buffer\n            .concat([item])\n            .slice(-(k + 1));\n    }\n\n    if ( buffer.length === k + 1 ) {\n        yield buffer[0];\n    }\n};\n","exports":[{"type":"Function","name":"last","description":"<p>Yields the k-th item from the end of the iterator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"k","type":"number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":163,"end":173,"name":"javascript"},"content":"[1,2,3]::last(0) // yields 3\n[1,2,3]::last(1) // yields 2\n[1,2,3]::last(2) // yields 1\n[1,2,3]::last(3) // yields nothing"}]}]}]},{"libraryName":"trine","filename":"src/iterable/map.js","version":"0.0.0","category":"iterable","module":"map","importTarget":"trine/iterable/map","source":"\"use strict\";\n\n/**\n * Yields the items of the iterator mapped through a given transformer.\n *\n * @type iT The item type of the input iterator.\n * @type rT The item type of the returned iterator.\n * @this {Iterable<iT>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::map(function () {\n *   return this * 2;\n * }) // yields 2, 4, 6\n * ```\n*/\nexport function * map <iT, rT> (\n    transformer : (_this : iT) => rT,\n) : Iterable<rT> {\n    for ( const item of this ) {\n        yield item::transformer();\n    }\n};\n","exports":[{"type":"Function","name":"map","description":"<p>Yields the items of the iterator mapped through a given transformer.</p>","thisParameter":{"type":"Iterable<iT>","description":""},"parameters":[{"name":"transformer","type":"(_this : iT) => rT","description":"","rest":false}],"typeParameters":[{"name":"iT","description":"The item type of the input iterator."},{"name":"rT","description":"The item type of the returned iterator."}],"returns":{"type":"Iterable<rT>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":283,"end":293,"name":"javascript"},"content":"[1,2,3]::map(function () {\n  return this * 2;\n}) // yields 2, 4, 6"}]}]}]},{"libraryName":"trine","filename":"src/iterable/quickSort.js","version":"0.0.0","category":"iterable","module":"quickSort","importTarget":"trine/iterable/quickSort","source":"\"use strict\";\n\n/**\n * A pure JS alternative to the builtin sort - operates directly on iterators, so it can be advantageous to native sort in cases where\n * you only need a few of the sorted items, e.g. 15 first products sorted\n * by price. The first items get sorted precisely first so the whole set\n * does not necessarily need to be sorted.\n *\n * @this {Iterable<T>}\n * @ntime O(n²)\n * @dspace O(n)\n * @example Basic Usage\n *\n * ```javascript\n * [3,2,5,1,4]::quickSort(function (b) {\n *   return this - b;\n * }); // yields 1,2,3,4,5\n * ```\n*/\nexport function * quickSort <T> (\n    comparator : (_this: T, b : T) => number,\n) : Iterable<T> {\n    const iterator = this[Symbol.iterator]();\n    const smaller = [];\n    const greater = [];\n    const first = iterator.next();\n\n    if ( first.done ) { return; }\n\n    const pivot = first.value;\n\n    for ( const item of iterator ) {\n        const comparison = pivot::comparator(item);\n\n        if ( comparison > 0 ) {\n            smaller.push(item);\n        } else {\n            greater.push(item);\n        }\n    }\n\n    yield * smaller::quickSort(comparator);\n    yield pivot;\n    yield * greater::quickSort(comparator);\n};\n","exports":[{"type":"Function","name":"quickSort","description":"<p>A pure JS alternative to the builtin sort - operates directly on iterators, so it can be advantageous to native sort in cases where you only need a few of the sorted items, e.g. 15 first products sorted by price. The first items get sorted precisely first so the whole set does not necessarily need to be sorted.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"comparator","type":"(_this: T, b : T) => number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":435,"end":445,"name":"javascript"},"content":"[3,2,5,1,4]::quickSort(function (b) {\n  return this - b;\n}); // yields 1,2,3,4,5"}]}]}]},{"libraryName":"trine","filename":"src/iterable/reduce.js","version":"0.0.0","category":"iterable","module":"reduce","importTarget":"trine/iterable/reduce","source":"\"use strict\";\n\nimport { aggregate } from \"./aggregate\";\nimport { last } from \"./last\";\n\n/**\n * Yields the accumulation of the iterator with a given accumulator method.\n *\n * @type rT The item type of the returned iterator.\n * @type iT The item type of the input iterator.\n * @this {Iterable<iT>}\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [3,2,5,1,4]::reduce(function (b) {\n *   return this + b;\n * }, 0); // yields 15\n * ```\n*/\nexport function * reduce <rT, iT> (\n    accumulator : (_this : rT, item : iT) => rT,\n    accumulation : rT,\n) : Iterable<rT> {\n    yield * this\n        ::aggregate(accumulator, accumulation)\n        ::last(0)\n        ;\n};\n","exports":[{"type":"Function","name":"reduce","description":"<p>Yields the accumulation of the iterator with a given accumulator method.</p>","thisParameter":{"type":"Iterable<iT>","description":""},"parameters":[{"name":"accumulator","type":"(_this : rT, item : iT) => rT","description":"","rest":false},{"name":"accumulation","type":"rT","description":"","rest":false}],"typeParameters":[{"name":"rT","description":"The item type of the returned iterator."},{"name":"iT","description":"The item type of the input iterator."}],"returns":{"type":"Iterable<rT>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":360,"end":370,"name":"javascript"},"content":"[3,2,5,1,4]::reduce(function (b) {\n  return this + b;\n}, 0); // yields 15"}]}]}]},{"libraryName":"trine","filename":"src/iterable/reverse.js","version":"0.0.0","category":"iterable","module":"reverse","importTarget":"trine/iterable/reverse","source":"\"use strict\";\n\n/**\n * Yields the items of the iterator in reverse order.\n *\n * @this {Iterable<T>}\n * @ntime O(n)\n * @dspace O(2n)\n * @example Basic Usage\n *\n * ```javascript\n * [5,4,1,2,3]::reverse() // yields 3, 2, 1, 4, 5\n * ```\n*/\nexport function * reverse <T> (\n\n) : Iterable<T> {\n    yield * [...this].reverse();\n};\n","exports":[{"type":"Function","name":"reverse","description":"<p>Yields the items of the iterator in reverse order.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":164,"end":174,"name":"javascript"},"content":"[5,4,1,2,3]::reverse() // yields 3, 2, 1, 4, 5"}]}]}]},{"libraryName":"trine","filename":"src/iterable/sort.js","version":"0.0.0","category":"iterable","module":"sort","importTarget":"trine/iterable/sort","source":"\"use strict\";\n\n/**\n * Yields the items of the iterator sorted by a given comparator.\n *\n * @this {Iterable<T>}\n * @ntime Engine-specific\n * @dspace Engine-specific\n * @example Basic Usage\n *\n * ```javascript\n * [3,2,1].sort(function (b) { return this - b; }) // yields 1, 2, 3\n * ```\n*/\nexport function * sort <T> (\n    comparator : (_this : T, b : T) => number,\n) : Iterable<T> {\n    yield * [...this].sort((a, b) => a::comparator(b));\n};\n","exports":[{"type":"Function","name":"sort","description":"<p>Yields the items of the iterator sorted by a given comparator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"comparator","type":"(_this : T, b : T) => number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":197,"end":207,"name":"javascript"},"content":"[3,2,1].sort(function (b) { return this - b; }) // yields 1, 2, 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/sortAlphabetically.js","version":"0.0.0","category":"iterable","module":"sortAlphabetically","importTarget":"trine/iterable/sortAlphabetically","source":"\"use strict\";\n\n/**\n * Yields the items of the iterator sorted by a given comparator.\n *\n * @this {Iterable<T>}\n * @ntime Engine-specific\n * @dspace Engine-specific\n * @example Basic Usage\n *\n * ```javascript\n * [\"foo\", \"bar\"]::sortAlphabetically() // yields \"bar\", \"foo\"\n * \"cba\"::sortAlphabetically() // yields \"a\", \"b\", \"c\"\n * ```\n*/\nexport function * sortAlphabetically <T> (\n\n) : Iterable<T> {\n    yield * [...this].sort();\n};\n","exports":[{"type":"Function","name":"sortAlphabetically","description":"<p>Yields the items of the iterator sorted by a given comparator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":197,"end":207,"name":"javascript"},"content":"[\"foo\", \"bar\"]::sortAlphabetically() // yields \"bar\", \"foo\"\n\"cba\"::sortAlphabetically() // yields \"a\", \"b\", \"c\""}]}]}]},{"libraryName":"trine","filename":"src/iterable/sortAlphabeticallyBy.js","version":"0.0.0","category":"iterable","module":"sortAlphabeticallyBy","importTarget":"trine/iterable/sortAlphabeticallyBy","source":"\"use strict\";\n\nimport { sortAlphabetically } from \"./sortAlphabetically\";\nimport { map } from \"./map\";\n\n/**\n * Yields the items of the iterator sorted by a given comparator.\n *\n * @this {Iterable<T>}\n * @ntime Engine-specific\n * @dspace Engine-specific\n * @example Basic Usage\n *\n * ```javascript\n * [{\n *   value: \"foo\",\n * }, {\n *   value: \"bar\",\n * }]::sortAlphabeticallyBy(function () {\n *   return this.value;\n * }) // yields { value: \"bar\" }, { value: \"foo\" }\n * ```\n*/\nexport function * sortAlphabeticallyBy <T> (\n    transformer : (_this : T) => string,\n) : Iterable<T> {\n    yield * this\n        ::map(function () {\n            const string = this::transformer();\n            return { value: this, toString: () => string };\n        })\n        ::sortAlphabetically()\n        ::map(function () {\n            return this.value;\n        });\n};\n","exports":[{"type":"Function","name":"sortAlphabeticallyBy","description":"<p>Yields the items of the iterator sorted by a given comparator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"transformer","type":"(_this : T) => string","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":286,"end":296,"name":"javascript"},"content":"[{\n  value: \"foo\",\n}, {\n  value: \"bar\",\n}]::sortAlphabeticallyBy(function () {\n  return this.value;\n}) // yields { value: \"bar\" }, { value: \"foo\" }"}]}]}]},{"libraryName":"trine","filename":"src/iterable/sortBy.js","version":"0.0.0","category":"iterable","module":"sortBy","importTarget":"trine/iterable/sortBy","source":"\"use strict\";\n\nimport { sort } from \"./sort\";\n\n/**\n * Yields the items of the iterator sorted based on score of the item returned by the transformer.\n *\n * @this {Iterable<T>}\n * @ntime Algorithm dependent\n * @dspace Algorithm dependent\n * @example Basic Usage\n *\n * ```javascript\n * [{\n *   value: 2,\n * }, {\n *   value: 1,\n * }]::sortBy(function () { return this.value; }) // yields { value: 1 }, { value: 2 }\n * ```\n*/\nexport function * sortBy <T> (\n    transformer : (_this : T) => number,\n) : Iterable<T> {\n    yield * this::sort(function (b) {\n        return this::transformer() - b::transformer();\n    });\n};\n","exports":[{"type":"Function","name":"sortBy","description":"<p>Yields the items of the iterator sorted based on score of the item returned by the transformer.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"transformer","type":"(_this : T) => number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":270,"end":280,"name":"javascript"},"content":"[{\n  value: 2,\n}, {\n  value: 1,\n}]::sortBy(function () { return this.value; }) // yields { value: 1 }, { value: 2 }"}]}]}]},{"libraryName":"trine","filename":"src/iterable/tail.js","version":"0.0.0","category":"iterable","module":"tail","importTarget":"trine/iterable/tail","source":"\"use strict\";\n\n/**\n * Yields the k last items of the iterator.\n *\n * @this {Iterable<T>}\n * @ntime O(n)\n * @dspace O(k)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::tail(1) // yields 3\n * [1,2,3]::tail(2) // yields 2, 3\n * [1,2,3]::tail(3) // yields 1, 2, 3\n * [1,2,3]::tail(4) // yields 1, 2, 3\n * ```\n*/\nexport function * tail <T> (\n    k : number,\n) : Iterable<T> {\n    let buffer = [];\n\n    for ( const item of this ) {\n        buffer = buffer\n            .concat([item])\n            .slice(-k);\n    }\n\n    yield * buffer;\n};\n","exports":[{"type":"Function","name":"tail","description":"<p>Yields the k last items of the iterator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"k","type":"number","description":"","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":153,"end":163,"name":"javascript"},"content":"[1,2,3]::tail(1) // yields 3\n[1,2,3]::tail(2) // yields 2, 3\n[1,2,3]::tail(3) // yields 1, 2, 3\n[1,2,3]::tail(4) // yields 1, 2, 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/take.js","version":"0.0.0","category":"iterable","module":"take","importTarget":"trine/iterable/take","source":"\"use strict\";\n\n/**\n * Yields the items that qualify the condition.\n *\n * @this {Iterable<T>}\n * @param condition A condition function to see if the item should be taken.\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3,4]\n *   ::take(function () {\n *     return this % 2 === 0;\n *   }) // yields 2 and 4\n * ```\n*/\nexport function * take <T> (\n    condition : (_this : T) => boolean,\n) : Iterable<T> {\n    for ( const item of this ) {\n        if ( item::condition() ) { yield item; }\n    }\n};\n","exports":[{"type":"Function","name":"take","description":"<p>Yields the items that qualify the condition.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"condition","type":"(_this : T) => boolean","description":"A condition function to see if the item should be taken.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":234,"end":244,"name":"javascript"},"content":"[1,2,3,4]\n  ::take(function () {\n    return this % 2 === 0;\n  }) // yields 2 and 4"}]}]}]},{"libraryName":"trine","filename":"src/iterable/takeWhile.js","version":"0.0.0","category":"iterable","module":"takeWhile","importTarget":"trine/iterable/takeWhile","source":"\"use strict\";\n\n/**\n * Yields the items until an item that matches the condition is found.\n *\n * @this {Iterable<T>}\n * @param condition A condition called on every item to see if it should be taken.\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3,4,1,2,3,4]::takeWhile(function () {\n *   return this &lt; 4;\n * }) // yields 1, 2, 3\n * ```\n*/\nexport function * takeWhile <T> (\n    condition : (_this : T) => boolean,\n) : Iterable<T> {\n    for ( const item of this ) {\n        if ( !item::condition() ) { return; }\n        yield item;\n    }\n};\n","exports":[{"type":"Function","name":"takeWhile","description":"<p>Yields the items until an item that matches the condition is found.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"condition","type":"(_this : T) => boolean","description":"A condition called on every item to see if it should be taken.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":263,"end":273,"name":"javascript"},"content":"[1,2,3,4,1,2,3,4]::takeWhile(function () {\n  return this &lt; 4;\n}) // yields 1, 2, 3"}]}]}]},{"libraryName":"trine","filename":"src/iterable/to.js","version":"0.0.0","category":"iterable","module":"to","importTarget":"trine/iterable/to","source":"\"use strict\";\n\n/**\n * Unwraps the iterator into a collection.\n *\n * @this {Iterable<iT>}\n * @param Type The constructor for the collection type.\n * @example Arrays\n *\n * ```javascript\n * [1,2,3].map(function () {\n *   return this * 2;\n * })::to(Array) // returns [2, 4, 6]\n * ```\n *\n * @example Objects\n *\n * ```javascript\n * [{id: \"a\"}, {id: \"b\"}].map(function () {\n *   return [this.id, this];\n * })::to(Object); // returns { a: { id: \"a\" }, b: { id: \"b\"} }\n * ```\n *\n * @example Other Collections\n *\n * ```javascript\n * [2.5, 3.5]::to(Uint16Array) // returns Uint16Array [2, 3]\n * [\"foo\", \"bar\", \"foo\"]::to(Set) // returns Set [\"foo\", \"bar\"]\n * [[\"x\", \"y\"], [\"z\", \"n\"]]::to(Map) // returns Map { \"x\": \"y\", \"z\": \"n\" }\n * ```\n*/\nexport function to <iT, rT> (\n    Type : Function,\n) : rT {\n    if ( Type === Array ) {\n        return [...this];\n    } else if ( Type === Object ) {\n        return [...this].reduce((accumulation, entry) =>\n            ({ ...accumulation, [entry[0]]: entry[1] }), {});\n    } else {\n        return new Type([...this]);\n    }\n};\n","exports":[{"type":"Function","name":"to","description":"<p>Unwraps the iterator into a collection.</p>","thisParameter":{"type":"Iterable<iT>","description":""},"parameters":[{"name":"Type","type":"Function","description":"The constructor for the collection type.","rest":false}],"typeParameters":[{"name":"iT","description":""},{"name":"rT","description":""}],"returns":{"type":"rT"},"examples":[{"title":"Arrays","content":[{"type":"code","language":{"type":"Identifier","start":173,"end":183,"name":"javascript"},"content":"[1,2,3].map(function () {\n  return this * 2;\n})::to(Array) // returns [2, 4, 6]"}]},{"title":"Objects","content":[{"type":"code","language":{"type":"Identifier","start":312,"end":322,"name":"javascript"},"content":"[{id: \"a\"}, {id: \"b\"}].map(function () {\n  return [this.id, this];\n})::to(Object); // returns { a: { id: \"a\" }, b: { id: \"b\"} }"}]},{"title":"Other Collections","content":[{"type":"code","language":{"type":"Identifier","start":509,"end":519,"name":"javascript"},"content":"[2.5, 3.5]::to(Uint16Array) // returns Uint16Array [2, 3]\n[\"foo\", \"bar\", \"foo\"]::to(Set) // returns Set [\"foo\", \"bar\"]\n[[\"x\", \"y\"], [\"z\", \"n\"]]::to(Map) // returns Map { \"x\": \"y\", \"z\": \"n\" }"}]}]}]},{"libraryName":"trine","filename":"src/iterable/union.js","version":"0.0.0","category":"iterable","module":"union","importTarget":"trine/iterable/union","source":"\"use strict\";\n\n/**\n * Yields the sorted union iterator of two sorted iterators.\n *\n * @this {Iterable<T>}\n * @param comparator The sorting value function. Should return `0` when items are equal, a positive number when the item on the left is greater and a negative number when the item on the right is greater.\n * @ntime O(n+m)\n * @dspace O(2)\n * @example Basic Usage\n *\n * ```javascript\n * [2,3,4,7,8,9]::union([1,5,6,7], function (b) {\n *   return this - b;\n * }); // yields 1,2,3,4,5,6,7,8,9\n * ```\n*/\nexport function * union <T> (\n    b : Iterable<T>,\n    comparator : (_this: T, b : T) => number,\n) : Iterable<T> {\n    const iteratorA = this[Symbol.iterator]();\n    const iteratorB = b[Symbol.iterator]();\n    let stepA = iteratorA.next();\n    let stepB = iteratorB.next();\n\n    while ( !stepA.done && !stepB.done ) {\n        const comparison = stepA.value::comparator(stepB.value);\n\n        if ( comparison < 0 ) {\n            yield stepA.value;\n            stepA = iteratorA.next();\n        } else if ( comparison > 0 ) {\n            yield stepB.value;\n            stepB = iteratorB.next();\n        } else {\n            yield stepA.value;\n            stepA = iteratorA.next();\n            stepB = iteratorB.next();\n        }\n    }\n\n    if ( !stepA.done ) {\n        yield stepA.value;\n        yield * iteratorA;\n    } else if ( !stepB.done ) {\n        yield stepB.value;\n        yield * iteratorB;\n    }\n};\n","exports":[{"type":"Function","name":"union","description":"<p>Yields the sorted union iterator of two sorted iterators.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"b","type":"Iterable<T>","description":"","rest":false},{"name":"comparator","type":"(_this: T, b : T) => number","description":"The sorting value function. Should return <code>0</code> when items are equal, a positive number when the item on the left is greater and a negative number when the item on the right is greater.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":377,"end":387,"name":"javascript"},"content":"[2,3,4,7,8,9]::union([1,5,6,7], function (b) {\n  return this - b;\n}); // yields 1,2,3,4,5,6,7,8,9"}]}]}]},{"libraryName":"trine","filename":"src/iterable/uniq.js","version":"0.0.0","category":"iterable","module":"uniq","importTarget":"trine/iterable/uniq","source":"\"use strict\";\n\n/**\n * Yields the items that aren't equal to the previous item based on a comparator.\n *\n * @this {Iterable<T>}\n * @param comparator The function to assert equality of the items.\n * @ntime O(n)\n * @dspace O(1)\n * @example Basic Usage\n *\n * ```javascript\n * [{\n *   id: 1,\n * }, {\n *   id: 1,\n * }, {\n *   id: 2,\n * }]::uniq(function (b) {\n *   return this.id === b.id;\n * }); // yields { id: 1 } and { id: 2 }\n *\n * [{\n *   id: 1,\n * }, {\n *   id: 2,\n * }, {\n *   id: 1,\n * }]::uniq(function (b) {\n *   return this.id === b.id;\n * }); // yields { id: 1 }, { id: 2 } and { id: 1 }\n * ```\n *\n * @example Unique Characters in a String\n *\n * ```javascript\n * \"bcabbbac\"::sortAlphabetically()::uniq(equals) // yields \"a\", \"b\", \"c\"\n * ```\n*/\nexport function * uniq <T> (\n    comparator : (_this : T, b : T) => boolean,\n) : Iterable<T> {\n    const iterator = this[Symbol.iterator]();\n    const first = iterator.next();\n\n    if ( first.done ) { return; }\n\n    yield first.value;\n    let previous = first.value;\n\n    for ( const item of iterator ) {\n        if ( !item::comparator(previous) ) { yield item; }\n        previous = item;\n    }\n};\n","exports":[{"type":"Function","name":"uniq","description":"<p>Yields the items that aren&#39;t equal to the previous item based on a comparator.</p>","thisParameter":{"type":"Iterable<T>","description":""},"parameters":[{"name":"comparator","type":"(_this : T, b : T) => boolean","description":"The function to assert equality of the items.","rest":false}],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"Iterable<T>"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":258,"end":268,"name":"javascript"},"content":"[{\n  id: 1,\n}, {\n  id: 1,\n}, {\n  id: 2,\n}]::uniq(function (b) {\n  return this.id === b.id;\n}); // yields { id: 1 } and { id: 2 }\n\n[{\n  id: 1,\n}, {\n  id: 2,\n}, {\n  id: 1,\n}]::uniq(function (b) {\n  return this.id === b.id;\n}); // yields { id: 1 }, { id: 2 } and { id: 1 }"}]},{"title":"Unique Characters in a String","content":[{"type":"code","language":{"type":"Identifier","start":656,"end":666,"name":"javascript"},"content":"\"bcabbbac\"::sortAlphabetically()::uniq(equals) // yields \"a\", \"b\", \"c\""}]}]}]}]},{"name":"number","modules":[{"libraryName":"trine","filename":"src/number/abs.js","version":"0.0.0","category":"number","module":"abs","importTarget":"trine/number/abs","source":"\"use strict\";\n\n/**\n * Returns the absolute value of the number.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * ;(-3)::abs() // returns 3\n * 2::abs() // returns 2\n * 0::abs() // returns 0\n * ```\n*/\nexport function abs (\n\n) : number {\n    return Math.abs(this);\n};\n","exports":[{"type":"Function","name":"abs","description":"<p>Returns the absolute value of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":118,"end":128,"name":"javascript"},"content":";(-3)::abs() // returns 3\n2::abs() // returns 2\n0::abs() // returns 0"}]}]}]},{"libraryName":"trine","filename":"src/number/acos.js","version":"0.0.0","category":"number","module":"acos","importTarget":"trine/number/acos","source":"\"use strict\";\n\n/**\n * Returns the inverse cosine of the number.\n *\n * @this {number}\n*/\nexport function acos (\n\n) : number {\n    return Math.acos(this);\n};\n","exports":[{"type":"Function","name":"acos","description":"<p>Returns the inverse cosine of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]},{"libraryName":"trine","filename":"src/number/add.js","version":"0.0.0","category":"number","module":"add","importTarget":"trine/number/add","source":"\"use strict\";\n\n/**\n * Returns the sum of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 5::add(4) // returns 9\n * ```\n*/\nexport function add (\n    b : number,\n) : number {\n    return this + b;\n};\n","exports":[{"type":"Function","name":"add","description":"<p>Returns the sum of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":108,"end":118,"name":"javascript"},"content":"5::add(4) // returns 9"}]}]}]},{"libraryName":"trine","filename":"src/number/asin.js","version":"0.0.0","category":"number","module":"asin","importTarget":"trine/number/asin","source":"\"use strict\";\n\n/**\n * Returns the arcsine of the number.\n *\n * @this {number}\n*/\nexport function asin (\n\n) : number {\n    return Math.asin(this);\n};\n","exports":[{"type":"Function","name":"asin","description":"<p>Returns the arcsine of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]},{"libraryName":"trine","filename":"src/number/atan.js","version":"0.0.0","category":"number","module":"atan","importTarget":"trine/number/atan","source":"\"use strict\";\n\n/**\n * Returns the arctangent of the number.\n *\n * @this {number}\n*/\nexport function atan (\n\n) : number {\n    return Math.atan(this);\n};\n","exports":[{"type":"Function","name":"atan","description":"<p>Returns the arctangent of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]},{"libraryName":"trine","filename":"src/number/cos.js","version":"0.0.0","category":"number","module":"cos","importTarget":"trine/number/cos","source":"\"use strict\";\n\n/**\n * Returns the cosine of the number.\n *\n * @this {number}\n*/\nexport function cos (\n\n) : number {\n    return Math.cos(this);\n};\n","exports":[{"type":"Function","name":"cos","description":"<p>Returns the cosine of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]},{"libraryName":"trine","filename":"src/number/div.js","version":"0.0.0","category":"number","module":"div","importTarget":"trine/number/div","source":"\"use strict\";\n\n/**\n * Returns the division of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 8::div(4) // returns 2\n * ```\n*/\nexport function div (\n    b : number,\n) : number {\n    return this / b;\n};\n","exports":[{"type":"Function","name":"div","description":"<p>Returns the division of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":113,"end":123,"name":"javascript"},"content":"8::div(4) // returns 2"}]}]}]},{"libraryName":"trine","filename":"src/number/max.js","version":"0.0.0","category":"number","module":"max","importTarget":"trine/number/max","source":"\"use strict\";\n\n/**\n * Returns the larger of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 8::max(-1) // returns 8\n * 4::max(7) // returns 7\n * ```\n*/\nexport function max (\n    b : number,\n) : number {\n    return Math.max(this, b);\n};\n","exports":[{"type":"Function","name":"max","description":"<p>Returns the larger of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":111,"end":121,"name":"javascript"},"content":"8::max(-1) // returns 8\n4::max(7) // returns 7"}]}]}]},{"libraryName":"trine","filename":"src/number/min.js","version":"0.0.0","category":"number","module":"min","importTarget":"trine/number/min","source":"\"use strict\";\n\n/**\n * Returns the smaller of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 8::min(-1) // returns -1\n * 4::min(7) // returns 4\n * ```\n*/\nexport function min (\n    b : number,\n) : number {\n    return Math.min(this, b);\n};\n","exports":[{"type":"Function","name":"min","description":"<p>Returns the smaller of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":112,"end":122,"name":"javascript"},"content":"8::min(-1) // returns -1\n4::min(7) // returns 4"}]}]}]},{"libraryName":"trine","filename":"src/number/mod.js","version":"0.0.0","category":"number","module":"mod","importTarget":"trine/number/mod","source":"\"use strict\";\n\n/**\n * Returns the modulo of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 8::mod(2) // returns 0\n * 4::mod(3) // returns 1\n * 5::mod(3) // returns 2\n * ```\n*/\nexport function mod (\n    b : number,\n) : number {\n    return this % b;\n};\n","exports":[{"type":"Function","name":"mod","description":"<p>Returns the modulo of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":111,"end":121,"name":"javascript"},"content":"8::mod(2) // returns 0\n4::mod(3) // returns 1\n5::mod(3) // returns 2"}]}]}]},{"libraryName":"trine","filename":"src/number/mul.js","version":"0.0.0","category":"number","module":"mul","importTarget":"trine/number/mul","source":"\"use strict\";\n\n/**\n * Returns the multiplication of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 8::mul(-2) // returns -16\n * 4::mul(3) // returns 12\n * 5::mul(1) // returns 5\n * ```\n*/\nexport function mul (\n    b : number,\n) : number {\n    return this * b;\n};\n","exports":[{"type":"Function","name":"mul","description":"<p>Returns the multiplication of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":119,"end":129,"name":"javascript"},"content":"8::mul(-2) // returns -16\n4::mul(3) // returns 12\n5::mul(1) // returns 5"}]}]}]},{"libraryName":"trine","filename":"src/number/pow.js","version":"0.0.0","category":"number","module":"pow","importTarget":"trine/number/pow","source":"\"use strict\";\n\n/**\n * Returns the n-th power of the number.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 2::pow(0) // returns 1\n * 2::pow(1) // returns 2\n * 2::pow(2) // returns 4\n * 4::pow(0.5) // returns 2\n * ```\n*/\nexport function pow (\n    n : number,\n) : number {\n    return this ** n;\n};\n","exports":[{"type":"Function","name":"pow","description":"<p>Returns the n-th power of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"n","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":114,"end":124,"name":"javascript"},"content":"2::pow(0) // returns 1\n2::pow(1) // returns 2\n2::pow(2) // returns 4\n4::pow(0.5) // returns 2"}]}]}]},{"libraryName":"trine","filename":"src/number/sign.js","version":"0.0.0","category":"number","module":"sign","importTarget":"trine/number/sign","source":"\"use strict\";\n\n/**\n * Returns the sign of the number, indicating whether the number is positive, negative or zero.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * ;0::sign() // returns 0\n * ;4::sign() // returns 1\n * ;-5::sign() // returns -1\n * ```\n*/\nexport function sign (\n\n) : number {\n    return Math.sign(this);\n};\n","exports":[{"type":"Function","name":"sign","description":"<p>Returns the sign of the number, indicating whether the number is positive, negative or zero.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":169,"end":179,"name":"javascript"},"content":";0::sign() // returns 0\n;4::sign() // returns 1\n;-5::sign() // returns -1"}]}]}]},{"libraryName":"trine","filename":"src/number/sin.js","version":"0.0.0","category":"number","module":"sin","importTarget":"trine/number/sin","source":"\"use strict\";\n\n/**\n * Returns the sine of the number.\n *\n * @this {number}\n*/\nexport function sin (\n\n) : number {\n    return Math.sin(this);\n};\n","exports":[{"type":"Function","name":"sin","description":"<p>Returns the sine of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]},{"libraryName":"trine","filename":"src/number/sub.js","version":"0.0.0","category":"number","module":"sub","importTarget":"trine/number/sub","source":"\"use strict\";\n\n/**\n * Returns the subtraction of two numbers.\n *\n * @this {number}\n * @example Basic Usage\n *\n * ```javascript\n * 0::sub(5) // returns -5\n * 4::sub(1) // returns 3\n * 5::sub(-5) // returns 10\n * ```\n*/\nexport function sub (\n    b : number,\n) : number {\n    return this - b;\n};\n","exports":[{"type":"Function","name":"sub","description":"<p>Returns the subtraction of two numbers.</p>","thisParameter":{"type":"number","description":""},"parameters":[{"name":"b","type":"number","description":"","rest":false}],"typeParameters":[],"returns":{"type":"number"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":116,"end":126,"name":"javascript"},"content":"0::sub(5) // returns -5\n4::sub(1) // returns 3\n5::sub(-5) // returns 10"}]}]}]},{"libraryName":"trine","filename":"src/number/tan.js","version":"0.0.0","category":"number","module":"tan","importTarget":"trine/number/tan","source":"\"use strict\";\n\n/**\n * Returns the tangent of the number.\n *\n * @this {number}\n*/\nexport function tan (\n\n) : number {\n    return Math.tan(this);\n};\n","exports":[{"type":"Function","name":"tan","description":"<p>Returns the tangent of the number.</p>","thisParameter":{"type":"number","description":""},"parameters":[],"typeParameters":[],"returns":{"type":"number"},"examples":[]}]}]},{"name":"value","modules":[{"libraryName":"trine","filename":"src/value/prop.js","version":"0.0.0","category":"value","module":"prop","importTarget":"trine/value/prop","source":"\"use strict\";\n\n/**\n * Returns the value of the property by given key.\n *\n * @this {any}\n * @example Basic Usage\n *\n * ```javascript\n * [1,2,3]::prop(\"length\") // 3\n * ```\n*/\nexport function prop (\n    key : string,\n) : any {\n    return this[key];\n};\n","exports":[{"type":"Function","name":"prop","description":"<p>Returns the value of the property by given key.</p>","thisParameter":{"type":"any","description":""},"parameters":[{"name":"key","type":"string","description":"","rest":false}],"typeParameters":[],"returns":{"type":"any"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":121,"end":131,"name":"javascript"},"content":"[1,2,3]::prop(\"length\") // 3"}]}]}]},{"libraryName":"trine","filename":"src/value/toFunction.js","version":"0.0.0","category":"value","module":"toFunction","importTarget":"trine/value/toFunction","source":"\"use strict\";\n\n/**\n * Returns a function that always returns the given value.\n *\n * @this {T} The value the function should return.\n * @example Basic Usage\n *\n * ```javascript\n * let fn = 1::toFunction();\n * fn() // returns 1\n * fn() // returns 1\n * ```\n*/\nexport function toFunction <T> (\n\n) : (() => T) {\n    return () => this;\n};\n","exports":[{"type":"Function","name":"toFunction","description":"<p>Returns a function that always returns the given value.</p>","thisParameter":{"type":"T","description":"The value the function should return."},"parameters":[],"typeParameters":[{"name":"T","description":""}],"returns":{"type":"() => T"},"examples":[{"title":"Basic Usage","content":[{"type":"code","language":{"type":"Identifier","start":165,"end":175,"name":"javascript"},"content":"let fn = 1::toFunction();\nfn() // returns 1\nfn() // returns 1"}]}]}]}]}]}